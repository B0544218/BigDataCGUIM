資料處理與清洗
========================================================
author: 曾意儒 Yi-Ju Tseng
autosize: true
font-family: 'Microsoft JhengHei'
navigation: slide


對應書本章節
========================================================
[6 資料處理與清洗](http://yijutseng.github.io/DataScienceRBook/manipulation.html)

[7 探索式資料分析](http://yijutseng.github.io/DataScienceRBook/eda.html)

大綱
====================================
- 資料型別轉換處理
- 文字字串處理
- 子集Subset
- 長表與寬表
- 遺漏值處理

資料型別轉換處理
====================================
type:sub-section 
包括**資料型別檢查**與**資料型別轉換**

資料型別:

- 數值 (numeric)
- 字串 (character)
- 布林變數 (logic)
- 日期 (Date)


資料型別檢查 - is.
====================================
使用`is.`函數檢查資料型別，回傳布林變數，若為**真**，回傳**TRUE**

- 是否為**數字** `is.numeric(變數名稱)`
- 是否為**文字** `is.character(變數名稱)`
- 是否為**布林變數** `is.logical(變數名稱)`

```{r}
num<-100
is.numeric(num)
is.character(num)
```

資料型別檢查 - class()
====================================
使用`class(變數名稱)`函數，直接回傳**資料型別**
```{r}
class(num)
class(Sys.Date())
```


資料型別轉換 - as.
====================================

使用`as.`函數轉換型別

- 轉換為**數字** `as.numeric(變數名稱)`
- 轉換為**文字** `as.character(變數名稱)`
- 轉換為**布林變數** `as.logical(變數名稱)`

```{r}
cha<-"100"
as.numeric(cha)
```

資料型別轉換 - as.
====================================

若無法順利完成轉換，會回傳空值`NA`，並出現警告訊息
```{r}
as.numeric("abc")
```


資料型別轉換練習
====================================
type:alert
incremental:true
回想起DCard(爬蟲結果不代表本人意見)的資料．．．
```{r}
library(rvest) ##(爬蟲結果不代表本人意見)
DCardCGU<-"https://www.dcard.tw/f/cgu?latest=true"
DCardContent<-read_html(DCardCGU)
post_title <- DCardContent %>% html_nodes(".PostEntry_unread_2U217") %>% html_text()
post_like<- DCardContent %>% html_nodes(".Like_counter_1enlP") %>% html_text()
DCardCGU_posts <- 
    data.frame(title = post_title,
               likeN=post_like,
               stringsAsFactors = F)
```

資料型別轉換練習
====================================
type:alert
按讚數是字串型別 (chr)
```{r}
str(DCardCGU_posts)
```
該如何將這按讚數欄位轉成數字呢？

文字字串處理
====================================
type:sub-section 

- 基本處理
- 搜尋字串

基本處理
====================================

- 切割 `strsplit()` **Split**
- 子集 `substr()` **sub string**
- 大小寫轉換 `toupper()` `tolower()`
- 兩文字連接 `paste()` `paste0()`
- 文字取代 `gsub()` **substitute**
- 前後空白去除 `str_trim()` 需安裝`stringr` package **trim**

基本處理-切割
====================================
strsplit (`欲切割的字串`,`用什麼符號切割`)
```{r}
strsplit ("Hello World"," ")
```

基本處理-切割（多字元）|
====================================
strsplit (`欲切割的字串`,`切割符號1|切割符號2|...`)
```{r}
strsplit ("Hello World"," |o")
```

基本處理-子集（切一小段）
====================================
substr(欲做子集的字串,開始位置,結束位置)
```{r}
substr("Hello World", start=2,stop=4)
```

基本處理-大小寫轉換
====================================
```{r}
toupper("Hello World")
tolower("Hello World")
```

基本處理-兩文字連接
====================================
paste(欲連接的字串1, 欲連接的字串2, 欲連接的字串3,.... sep=中間用什麼符號分隔)
```{r}
paste("Hello", "World")
paste("Hello", "World", sep='')
paste0("Hello", "World")
```

基本處理-文字取代
====================================
gsub(`想要換掉的舊字串`,`想要換成的新字串`,`欲作取代的完整字串`)
```{r}
gsub("o","0","Hello World")
```

基本處理-文字取代（多字元）|
====================================
gsub(想要換掉的舊字串1|想要換掉的舊字串2|...,想要換成的新字串,欲作取代的完整字串)
```{r}
gsub("o|l","0","Hello World")
```

基本處理-前後空白去除
====================================
str_trim要使用前需要安裝與載入**stringr**套件
```{r}
library(stringr)
str_trim(" Hello World ")
```


搜尋字串
====================================
- 通常使用在**比對文字向量**
- **有分大小寫**
- 依照回傳值的型態不同，有兩種常用函數
    - 回傳符合條件之**向量位置(index)** `grep(搜尋條件,要搜尋的向量)`
    - 回傳每個向量**是否**符合條件(TRUE or FALSE) `grepl(搜尋條件,要搜尋的向量)`

```{r}
##在姓名文字向量中尋找A，回傳包含"A"之元素位置
grep("A",c("Alex","Tom","Amy","Joy","Emma")) 
```

搜尋字串 - grepl()
====================================
```{r}
##在姓名文字向量中尋找A，回傳各元素是否包含"A"
grepl("A",c("Alex","Tom","Amy","Joy","Emma")) 
##在姓名文字向量中尋找a，回傳各元素是否包含"a"
grepl("a",c("Alex","Tom","Amy","Joy","Emma")) 
```

搜尋字串 - grep()
====================================
```{r}
##在姓名文字向量中尋找A，回傳包含"A"的元素位置
grep("A",c("Alex","Tom","Amy","Joy","Emma")) 
##在姓名文字向量中尋找a，回傳包含"a"的元素位置
grep("a",c("Alex","Tom","Amy","Joy","Emma")) 
```

搜尋字串 - grep()
====================================
type:alert
多字元？

文字字串處理練習
====================================
type:alert
incremental:true

又想起DCard(爬蟲結果不代表本人意見)的資料．．．
```{r}
library(rvest) ##載入
DCardCGU<-"https://www.dcard.tw/f/cgu?latest=true"
DCardContent<-read_html(DCardCGU)
DCardContentNode <-  html_nodes(DCardContent, ".PostEntry_excerpt_2eHlN")
post_contentShort<- html_text(DCardContentNode)
```

文字字串處理練習
====================================
type:alert
incremental:true

- 在post_contentShort中，出現“資管”字串的文章位置(index)
- 將post_contentShort中的文章用逗號（全形，）切割
- 將post_contentShort中的文章用逗號或問號或句號（全形，？。）切割

正規標示式
====================================
- 字串處理通常會搭配正規表示式 (Regular Expression)
- 請見[範例](https://blog.yjtseng.info/post/regexpr/)，有興趣的同學可以參考

結巴斷詞
====================================
- 一大串文字該怎麼分析？
- 中文常用結巴套件
- 詳見[範例](https://blog.yjtseng.info/post/jiebar/)

子集Subset - 一維資料
====================================
type:sub-section 

之前有介紹使用`[ ]`取出單一或多個元素的方法
```{r}
letters ##R語言內建資料之一
letters[1] ##取出letters向量的第一個元素
```

子集Subset - 一維資料
====================================

也可以用“負號”去掉不要的資料
```{r}
letters[c(1,3,5)] ##取出letters向量的第1,3,5個元素
letters[c(-1,-3,-5)] ##取出letters向量除了第1,3,5個元素之外的所有元素
```

子集Subset - 一維資料
====================================
若想要快速取得一向量的開頭與結尾元素，可使用`head()`和`tail()`函數
```{r}
head(letters,5) ##取出letters向量的前五個元素
tail(letters,3) ##取出letters向量的後三個元素
```

子集Subset - 二維資料
====================================
type:sub-section 
- 可針對列(Row)和行(Column)做子集
- [Hadley Wickham](http://hadley.nz/)開發`dplyr`套件
- 使用以下函數分析整理資料：
    - `select()`: 選要分析的欄位，欄位子集 (Column)
    - `filter()`: 選要分析的觀察值，觀察值子集 (Row)


dplyr
====================================

如要使用必須安裝並載入`dplyr` package
```{r eval=F}
install.packages("dplyr") ##安裝
```
```{r message=F}
library(dplyr) ##載入
```

以NBA資料為例，首先先讀入資料
```{r}
library(SportsAnalytics)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```

欄位(Column)子集 select() 
====================================
- 針對欄位 (Column)做子集
- `select(資料名稱,欄位條件1,欄位條件2,...)`
- 條件1與條件2是使用**或**的連結概念


欄位(Column)子集 select() 
====================================
- `dplyr`提供幾個方便篩選名稱的函式：
    - `starts_with()`
    - `ends_with()`
    - `contains()`
    - `matches()`: matches a regular expression
    - `num_range()`: num_range("x", 8:11).
    - `one_of()`: variables in character vector
    - `everything()`

詳細說明可在R執行視窗中輸入`?select_helpers`查看。

欄位(Column)子集 select() 
====================================
篩選欄位名稱為`Name`、開頭是`Threes`或是開頭是`FieldGoals`的欄位
```{r select1,eval=F}
##等於NBA1516[,c("Name","ThreesMade","ThreesAttempted",
##   "FieldGoalsMade","FieldGoalsAttempted")]
select1<-
    select(NBA1516,Name,starts_with("Threes"),
            starts_with("FieldGoals"))
head(select1)
```
```{r select1.1,echo=F}
select1<-select(NBA1516,Name,starts_with("Threes"),
                starts_with("FieldGoals"))
knitr::kable(head(select1,1)) 
```

欄位(Column)子集 select() 
====================================

若想篩選欄位`Name`到欄位`FieldGoalsMade`間的所有欄位，可用`:`串連欄位名稱
```{r selec2,eval=F}
##等同於NBA1516[,2:7]
select2<-select(NBA1516,Name:FieldGoalsMade)
head(select2,3)
```
```{r selec2.1,echo=F}
##等同於NBA1516[,2:12]
select2<-select(NBA1516,Name:FieldGoalsMade)
knitr::kable(head(select2,3))
```

欄位(Column)子集 select() 
====================================

若想篩選欄位`Name`到欄位`FieldGoalsMade`間的所有欄位，但不想要`GamesPlayed`欄位
- 用`:`串連欄位名稱
- 用`-`去除不要的欄位
```{r selec3,eval=F}
##等同於NBA1516[,c(2:4,612)]
select3<-
    select(NBA1516,Name:FieldGoalsMade,-GamesPlayed)
head(select3,3)
```
```{r selec3.1,echo=F}
select3<-select(NBA1516,Name:FieldGoalsMade,-GamesPlayed)
knitr::kable(head(select3,3))
```

觀察值(Row)子集 filter()
====================================
- 是針對列 (Row)做子集
- `filter(資料名稱,篩選條件1,篩選條件2)`篩選條件們是用**且**的邏輯串連
- **出場分鐘數超過2850分鐘**的球員資料，可輸入下列指令
```{r filter1,eval=F}
##等於NBA1516[NBA1516$TotalMinutesPlayed>2850,]
filter(NBA1516,TotalMinutesPlayed>2850)
```
```{r filter1.1,echo=F}
##等同於 NBA1516[NBA1516$TotalMinutesPlayed>2850,]
filter1<-filter(NBA1516,TotalMinutesPlayed>2850)
knitr::kable(filter1)
```

觀察值(Row)子集 filter()
====================================
也可選擇隊伍名稱為"BOS"或"SAN"的球員資料
```{r filter2,eval=F}
##等於NBA1516[NBA1516$Team %in% c("BOS","SAN"),]
filter(NBA1516,Team %in% c("BOS","SAN"))
```
```{r filter2.1,echo=F}
knitr::kable(head(filter(NBA1516,Team %in% c("BOS","SAN"))))
```

觀察值(Row)子集 filter()
====================================
在`filter()`函式中可**直接做變數計算**後再篩選
```{r filter3,eval=F}
filter(NBA1516,
       FieldGoalsMade/FieldGoalsAttempted>0.7)
```
```{r filter3.1,echo=F}
knitr::kable(filter(NBA1516,FieldGoalsMade/FieldGoalsAttempted>0.7))
```
觀察值(Row)子集 filter()
====================================
也可使用 `&` 和 `|`等符號串連邏輯
```{r filter4,eval=F}
filter(NBA1516,
       FieldGoalsMade/FieldGoalsAttempted>0.7
           &GamesPlayed>30)
```
```{r filter4.1,echo=F}
knitr::kable(filter(NBA1516,FieldGoalsMade/FieldGoalsAttempted>0.7 & GamesPlayed>30))
```

dplyr 子集練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r,eval=F}
library(SportsAnalytics)
library(dplyr)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```
- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料
- 只留下Name Team Position GamesPlayed TotalMinutesPlayed Assists Steals 七個欄位
- 用data.table寫出一樣的功能

子集Subset - head()
====================================

若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數
```{r eval=F}
head(iris,5) ##取出iris資料框的前五列
```
```{r echo=F}
knitr::kable(head(iris,5)) 
```

子集Subset - tail()
====================================

若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數
```{r eval=F}
tail(iris,3) ##取出iris資料框的後三列
```
```{r echo=F}
knitr::kable(tail(iris,3))
```


長表與寬表
====================================
type:sub-section

- 在資料處理的過程中，常因各種需求，需要執行長寬表互換的動作
- tidyr package提供完整的轉換功能
    - 寬表轉長表 `gather(資料框/寬表,key="主鍵欄位名稱",value="數值欄位名稱",要轉換的資料1,要轉換的資料2,...)`
    
```{r echo=FALSE}
knitr::include_graphics("figures/gather.png")
```


長表與寬表
====================================
type:sub-section

- 在資料處理的過程中，常因各種需求，需要執行長寬表互換的動作
- tidyr package提供完整的轉換功能
    - 長表轉寬表 `spread(資料框/長表,key="要展開的欄位名稱",value="數值欄位名稱")`
    
```{r echo=FALSE}
knitr::include_graphics("figures/spread.png")
```
    
長表與寬表
====================================
原來的`airquality`資料框中，有Ozone, Solar.R, Wind, Temp, Month, Day等六個欄位 (Column)，屬於寬表
```{r eval=F}
head(airquality,3)
```
```{r echo=F}
knitr::kable(head(airquality,3)) 
```

寬表轉長表 gather（）
====================================

- 保留Month和Day兩個欄位
- 將其他欄位的名稱整合至Type欄位，數值整合至Value欄位
```{r}
library(tidyr)
airqualityL<-gather(airquality,
                    key=Type,value=Value,
                    Ozone,Solar.R,Wind,Temp) ##欄位Ozone,Solar.R,Wind,Temp轉成單一欄位
```
```{r eval=F}
head(airqualityL)
```
```{r echo=F}
knitr::kable(head(airqualityL)) 
```

長表轉寬表 spread（）
====================================

- `airqualityL`資料框中，剩下Month, Day, Type, Value等四個欄位 (Column)，屬於長表
- Type欄位的值轉換為新欄位，並將Value欄位填回新增的欄位

```{r}
#欄位保留"Month","Day"外，其他欄位由variable定義
airqualityW<-spread(airqualityL, key=Type,value=Value) 
```
```{r eval=F}
head(airqualityW)
```
```{r echo=F}
knitr::kable(head(airqualityW))
```

寬表轉長表練習
====================================
type:alert
incremental:true

- 下載[寬表範例資料](https://raw.githubusercontent.com/CGUIM-BigDataAnalysis/BigDataCGUIM/master/104/HEPATITIS_A_Cases.csv)
- 保留YEAR和WEEK欄位，將各州資料轉換成長表
- 檢查長表的內容與資料型態，共有幾個觀察值?幾個變數?


遺漏值處理
====================================
type:sub-section

- 遺漏值(Missing Value)常常出現在真實資料內，在數值運算時常會有問題
- 最簡單的方法是將有缺值的資料移除

遺漏值處理 is.na()
====================================
如資料為向量，可使用`is.na()`來判斷資料是否為空值`NA`，若為真`TRUE`，則將資料移除。
```{r}
naVec<-c("a","b",NA,"d","e")
is.na(naVec)
naVec[!is.na(naVec)] ##保留所有在is.na()檢查回傳FALSE的元素
```



遺漏值處理 drop_na()
====================================
若資料型態為資料框，可使用tidyr套件的`drop_na`來選出完整的資料列
```{r eval=F}
head(airquality,5)
```
```{r echo=F}
knitr::kable(head(airquality,5))
```


遺漏值處理 drop_na()
====================================
若資料型態為資料框，可使用tidyr套件的`drop_na`來選出完整的資料列

```{r eval=F}
drop_na(airquality)
```
```{r echo=F}
knitr::kable(head(drop_na(airquality)))
```

遺漏值處理 fill()
====================================
若資料型態為資料框，可使用tidyr套件的`fill`來將資料補滿，基本上就是用前一筆資料補。範例資料如下
```{r eval=F}
example<-data.frame(Name=c("Emma",NA,NA,NA,"David",NA),
                    Course=c("Eng","Math","R","Java","Eng","R"),
                    Score=c(100,90,85,70,95,85),
                    stringsAsFactors = F)
example 
```
```{r echo=F}
example<-data.frame(Name=c("Emma",NA,NA,NA,"David",NA),
                    Course=c("Eng","Math","R","Java","Eng","R"),
                    Score=c(100,90,85,70,95,85),
                    stringsAsFactors = F)
knitr::kable(head(example))
```

遺漏值處理 fill()
====================================
若資料型態為資料框，可使用tidyr套件的`fill`來將資料補滿，基本上就是用前一筆資料補。補完的範例如下：
```{r eval=F}
fill(example,Name)
```
```{r echo=F}
knitr::kable(head(fill(example,Name)))
```

遺漏值處理練習
====================================
type:alert
incremental:true

- 下載剛剛的[寬表範例資料](https://raw.githubusercontent.com/CGUIM-BigDataAnalysis/BigDataCGUIM/master/104/HEPATITIS_A_Cases.csv)
- 保留YEAR和WEEK欄位，將各州資料轉換成長表
- 轉換為長表後，將value欄位(盛行率)轉換為數值 (as.numeric)
- 刪除有缺值的資料
- 完整資料中，有幾筆觀察值?幾個變數?

遺漏值處理 補值？
====================================
- 利用演算法補值也是一種解決辦法
- [R筆記–(10)遺漏值處理(Impute Missing Value)](http://www.rpubs.com/skydome20/R-Note10-Missing_Value)


