探索式資料分析
========================================================
author: 曾意儒 Yi-Ju Tseng
autosize: true
font-family: 'Microsoft JhengHei'
navigation: slide


對應書本章節
========================================================
[7 探索式資料分析](http://yijutseng.github.io/DataScienceRBook/eda.html)

大綱
====================================
type:sub-section 

- 什麼是探索式資料分析
- 量化的分析方式
- dplyr
- data.table


什麼是探索式資料分析
====================================
type:sub-section 

- 探索式資料分析 (**E**xploratory **D**ata **A**nalysis)
- 在資料量 大/雜/髒 的時候，探索式資料分析非常重要
- 運用**視覺化**、**基本的統計**等工具，反覆的探索**資料特性**，獲取資料所包含的資訊、結構和特點
- 在進行複雜或嚴謹的分析之前，必須要對資料有更多認識，才能訂定**對的資料分析方向**
- 通常**不需要**嚴謹的假設和細節呈現


探索式資料分析
====================================
- 分析各變數間的**關聯性**，看是否有預料之外的有趣發現
- 觀察資料內容是否符合預期，若否，檢查資料**是否有誤**
- 檢查資料是否符合分析前的假設

透過探索性分析來**調整分析的方向**，減少因分析方向錯誤所造成的時間浪費。

探索式資料分析
====================================

- 圖形化Graphical
    - 單變量Univariate
    - 雙變量Bivariate
    - 多變量Multivariate
    
- 量化Quantitative
    - 單變量Univariate
    - 雙變量Bivariate
    - 多變量Multivariate

圖形化的分析
====================================
包括做圖與列表，將會在下章節介紹，本章節著重於量化的分析方式。


量化的分析方式: 單變量
====================================
資料初步統計，量化的分析方式可包含

- 計算集中趨勢
    - 平均值 Mean `mean()`
    - 中位數 Median `median()`
    - 眾數 Mode，R無內建函數，可直接用`table()`找出現次數最多的資料
    
量化的分析方式: 單變量-集中趨勢
====================================
```{r}
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
table(iris$Species)
```
    
量化的分析方式: 單變量
====================================
資料初步統計，量化的分析方式可包含

- 計算資料分散程度
    - 最小值 Min `min()`
    - 最大值 Max `max()`
    - 範圍 Range `range()`
    - 四分位差 Quartiles `quantile()`
    - 變異數 Variance `var()`
    - 標準差 Standard deviation `sd()`
    
量化的分析方式: 單變量-分散程度
====================================
```{r}
min(iris$Sepal.Length)
max(iris$Sepal.Length)
range(iris$Sepal.Length)
```

量化的分析方式: 單變量
====================================
```{r}
quantile(iris$Sepal.Length)
var(iris$Sepal.Length)
sd(iris$Sepal.Length)
```

單變量分析練習
====================================
type:alert
incremental:true

- 在mtcars資料集中，車子馬力(hp)的平均值？標準差？
- 在mtcars資料集中，幾輪(cyl)的車子最多？
- 在mtcars資料集中，油耗(mpg)的四分位數是多少？

量化的分析方式: 雙變量
====================================
- 列聯表 Crosstabs `table()`, `prop.table()`
- 共變異數 Covariance `cov()` 用於衡量兩個變量的總體誤差，[維基百科](https://zh.wikipedia.org/wiki/%E5%8D%8F%E6%96%B9%E5%B7%AE)
- 相關性 Correlation `cor()`

量化的分析方式: 雙變量-列聯表
====================================
輪子的數目與自手排的關係
```{r}
table(mtcars$cyl,mtcars$am)
```

量化的分析方式: 雙變量-列聯表
====================================
```{r}
mtTable<-table(mtcars$cyl,mtcars$am)
prop.table(mtTable)
```

量化的分析方式: 雙變量-列聯表
====================================
```{r}
prop.table(mtTable,margin = 1)
prop.table(mtTable,margin = 2)
```

量化的分析方式: 雙變量-共變異數
====================================
```{r eval=F}
cov(mtcars)
```
```{r echo=F}
options(digits = 1)
knitr::kable(cov(mtcars))
```

量化的分析方式: 雙變量-相關性
====================================
油耗跟馬力的關聯性（相關係數）
```{r}
cor(mtcars$mpg,mtcars$hp)
```

雙變量分析練習
====================================
type:alert
incremental:true

- 在airquality資料集中，氣溫Temp和臭氧濃度Ozone的相關係數是多少？
- 在mtcars資料集中，各輪數cyl中，各類前進檔數gear的比例是多少

量化的分析方式 w/ R
====================================
- 大多可用R的內建函數完成計算
- 但是在探索式分析時，常常需要**資料分組**
    - 觀察**男性**和**女性**的血壓差異
    - **A隊**與**B隊**的三分球命中率差異
    - **中鋒**和**後衛**的助攻次數
    - ...等
- 若只用基本的內建函數計算，相當耗時
    - `data.table`和`dplyr` packages可以快速完成**分組分析**!



dplyr
====================================
type:sub-section 

- [Hadley Wickham](http://hadley.nz/)開發
- 使用以下函數分析整理資料：
    - `select()`: 選要分析的欄位，欄位子集 (Column)
    - `filter()`: 選要分析的觀察值，觀察值子集 (Row)
    - `mutate()`: 增加新欄位
    - `summarise()`: 計算統計值

dplyr
====================================
type:sub-section 

- 使用以下函數分析整理資料：
    - `group_by()`: 分組依據
    - `arrange()`: 觀察值排序
    - `rename()`: 欄位重新命名
    - `%>%`: the “pipe” operator 連結上數函式，將所有函式計算串在一起執行

dplyr
====================================

如要使用必須安裝並載入`dplyr` package
```{r eval=F}
install.packages("dplyr") ##安裝
```
```{r message=F}
library(dplyr) ##載入
```

以上述NBA資料為例，首先先讀入資料
```{r}
library(SportsAnalytics)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```

欄位(Column)子集 select() 
====================================
- 針對欄位 (Column)做子集
- `select(資料名稱,欄位條件1,欄位條件2,...)`
- 條件1與條件2是使用**或**的連結概念


欄位(Column)子集 select() 
====================================
- `dplyr`提供幾個方便篩選名稱的函式：
    - `starts_with()`
    - `ends_with()`
    - `contains()`
    - `matches()`: matches a regular expression
    - `num_range()`: num_range("x", 8:11).
    - `one_of()`: variables in character vector
    - `everything()`

詳細說明可在R執行視窗中輸入`?select_helpers`查看。

欄位(Column)子集 select() 
====================================
篩選欄位名稱為`Name`、開頭是`Threes`或是開頭是`FieldGoals`的欄位
```{r select1,eval=F}
##等於NBA1516[,c("Name","ThreesMade","ThreesAttempted",
##   "FieldGoalsMade","FieldGoalsAttempted")]
select1<-
    select(NBA1516,Name,starts_with("Threes"),
            starts_with("FieldGoals"))
head(select1)
```
```{r select1.1,echo=F}
select1<-select(NBA1516,Name,starts_with("Threes"),
                starts_with("FieldGoals"))
knitr::kable(head(select1,1)) 
```

欄位(Column)子集 select() 
====================================

若想篩選欄位`Name`到欄位`FieldGoalsMade`間的所有欄位，可用`:`串連欄位名稱
```{r selec2,eval=F}
##等同於NBA1516[,2:7]
select2<-select(NBA1516,Name:FieldGoalsMade)
head(select2,3)
```
```{r selec2.1,echo=F}
##等同於NBA1516[,2:12]
select2<-select(NBA1516,Name:FieldGoalsMade)
knitr::kable(head(select2,3))
```

欄位(Column)子集 select() 
====================================

若想篩選欄位`Name`到欄位`FieldGoalsMade`間的所有欄位，但不想要`GamesPlayed`欄位
- 用`:`串連欄位名稱
- 用`-`去除不要的欄位
```{r selec3,eval=F}
##等同於NBA1516[,c(2:4,612)]
select3<-
    select(NBA1516,Name:FieldGoalsMade,-GamesPlayed)
head(select3,3)
```
```{r selec3.1,echo=F}
select3<-select(NBA1516,Name:FieldGoalsMade,-GamesPlayed)
knitr::kable(head(select3,3))
```

觀察值(Row)子集 filter()
====================================
- 是針對列 (Row)做子集
- `filter(資料名稱,篩選條件1,篩選條件2)`篩選條件們是用**且**的邏輯串連
- **出場分鐘數超過2850分鐘**的球員資料，可輸入下列指令
```{r filter1,eval=F}
##等於NBA1516[NBA1516$TotalMinutesPlayed>2850,]
filter(NBA1516,TotalMinutesPlayed>2850)
```
```{r filter1.1,echo=F}
##等同於 NBA1516[NBA1516$TotalMinutesPlayed>2850,]
filter1<-filter(NBA1516,TotalMinutesPlayed>2850)
knitr::kable(filter1)
```

觀察值(Row)子集 filter()
====================================
也可選擇隊伍名稱為"BOS"或"SAN"的球員資料
```{r filter2,eval=F}
##等於NBA1516[NBA1516$Team %in% c("BOS","SAN"),]
filter(NBA1516,Team %in% c("BOS","SAN"))
```
```{r filter2.1,echo=F}
knitr::kable(head(filter(NBA1516,Team %in% c("BOS","SAN"))))
```

觀察值(Row)子集 filter()
====================================
在`filter()`函式中可**直接做變數計算**後再篩選
```{r filter3,eval=F}
filter(NBA1516,
       FieldGoalsMade/FieldGoalsAttempted>0.7)
```
```{r filter3.1,echo=F}
knitr::kable(filter(NBA1516,FieldGoalsMade/FieldGoalsAttempted>0.7))
```
觀察值(Row)子集 filter()
====================================
也可使用 `&` 和 `|`等符號串連邏輯
```{r filter4,eval=F}
filter(NBA1516,
       FieldGoalsMade/FieldGoalsAttempted>0.7
           &GamesPlayed>30)
```
```{r filter4.1,echo=F}
knitr::kable(filter(NBA1516,FieldGoalsMade/FieldGoalsAttempted>0.7 & GamesPlayed>30))
```

dplyr 子集練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r,eval=F}
library(SportsAnalytics)
library(dplyr)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```
- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料
- 只留下Name Team Position GamesPlayed TotalMinutesPlayed Assists Steals 七個欄位
- 用data.table寫出一樣的功能



增加新欄位 mutate()
====================================
- 新增新欄位`FGRate`，欄位值為`FieldGoalsMade/FieldGoalsAttempted`
```{r mutate1}
mutate1<-
    mutate(NBA1516,
           FGRate=FieldGoalsMade/FieldGoalsAttempted)
mutate1$FGRate[1:5]
```

計算統計值 summarise() 
====================================
- **球員個數**、**不重複的隊伍數**以及**不重複的守備位置數**等
- n(), n_distinct()
```{r summarise1}
summarise(NBA1516,
          nPlayer=n(),
          nTeam=n_distinct(Team),
          nPos=n_distinct(Position))
```

計算統計值 summarise() 
====================================
- 通常會與其他功能合併使用
- 計算**出場分鐘數大於2500分鐘**的**球員個數**、**平均投進的兩分球數**以及**平均投出的兩分球數**
```{r summarise2}
filter1<-filter(NBA1516,TotalMinutesPlayed>2500)
summarise(filter1,
          nPlayer=n(),
          meanFGMade=mean(FieldGoalsMade),
          meanFGAtt=mean(FieldGoalsAttempted))
```

dplyr filter()+summarise() 練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r eval=F}
library(SportsAnalytics)
library(dplyr)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```
- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料
- 計算這些球員的**平均出場數GamesPlayed**，**平均出場分鐘數TotalMinutesPlayed**

pipe %>%
====================================
- 直接用**pipe**符號`%>%`將指令串連，減少暫存物件（filter1）的生成
```{r summarise3}
filter(NBA1516,TotalMinutesPlayed>2500) %>%
    summarise(nPlayer=n(),
        meanFGMade=mean(FieldGoalsMade),
        meanFGAtt=mean(FieldGoalsAttempted))
```

dplyr pipe %>% 練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r}
library(SportsAnalytics)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
library(dplyr)
```
- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料
- 計算這些球員的**平均出場數GamesPlayed**，**平均出場分鐘數TotalMinutesPlayed**
- 用pipe **%>%**

分組 group_by()
====================================
- 設定分組依據
- 與`summarise()`函式合併使用
- 計算各**隊**（以Team作為分組依據）的**球員數**、**平均投進的兩分球數**以及**平均投出的兩分球數**
```{r group1,eval=F}
group_by(NBA1516,Team)%>%
    summarise(nPlayer=n(),
        meanFGMade=mean(FieldGoalsMade),
        meanFGAtt=mean(FieldGoalsAttempted))
```
```{r group1.1,echo=F}
group1<-group_by(NBA1516,Team)%>%
  summarise(nPlayer=n(),meanFGMade=mean(FieldGoalsMade),
                meanFGAtt=mean(FieldGoalsAttempted))
knitr::kable(head(group1,4))
```

分組 group_by()
====================================
- 可設定**多個**分組依據
- 計算各**隊**各**守備位置**（以Team和Position作為分組依據）的**球員數**、**平均投進的兩分球數**以及**平均投出的兩分球數**
```{r group2,eval=F}
group_by(NBA1516,Team,Position)%>%
  summarise(nPlayer=n(),
        meanFGMade=mean(FieldGoalsMade),
        meanFGAtt=mean(FieldGoalsAttempted))
```
```{r group2.1,echo=F}
group2<-group_by(NBA1516,Team,Position)%>%
  summarise(nPlayer=n(),meanFGMade=mean(FieldGoalsMade),
                meanFGAtt=mean(FieldGoalsAttempted))
knitr::kable(head(group2,3))
```

排序 arrange()
====================================
排序功能，預設為**遞增排序**
```{r arrange1,eval=F}
arrange(NBA1516,TotalMinutesPlayed)
```
```{r arrange1.1,echo=F}
arrange1<-arrange(NBA1516,TotalMinutesPlayed)
knitr::kable(head(arrange1)) 
```

遞減排序 arrange()
====================================
使用`desc()`將要**遞減排序**的變數包起來，就可以遞減排序
```{r arrange2,eval=F}
arrange(NBA1516,
        desc(TotalMinutesPlayed),
        desc(GamesPlayed))
```
```{r arrange2.1,echo=F}
arrange2<-arrange(NBA1516,desc(TotalMinutesPlayed),desc(GamesPlayed))
knitr::kable(head(arrange2,3))
```

dplyr綜合範例
====================================
- 結合`group_by()`、`summarise()`、`arrange()`，可完成一連串的資料分析
- 計算各**隊**各**守備**位置（以Team和Position作為分組依據）的球員數、平均投進的兩分球數以及平均投出的兩分球數，並依平均投進的兩分球數**由大到小排序**
```{r arrange3,eval=F}
group_by(NBA1516,Team,Position) %>%
  summarise(nPlayer=n(),
    meanFGMade=mean(FieldGoalsMade),
    meanFGAtt=mean(FieldGoalsAttempted)) %>%
  arrange(desc(meanFGMade))
```
```{r arrange3.1,echo=F}
arrange3<-group_by(NBA1516,Team,Position)%>%
  summarise(nPlayer=n(),meanFGMade=mean(FieldGoalsMade),
                meanFGAtt=mean(FieldGoalsAttempted)) %>%
  arrange(desc(meanFGMade))
knitr::kable(head(arrange3,3))
```


修改欄位名稱 rename()
====================================
`新名稱=舊名稱`
```{r rename1}
rename1<-rename(NBA1516,Po=Position)
rename1[1:5,1:5]
```

dplyr 綜合練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r eval=F}
library(SportsAnalytics)
library(dplyr)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```
- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料
- 依**守備位置**Position分組，計算球員的平均**出場數**GamesPlayed，平均**出場分鐘數**TotalMinutesPlayed
- 依平均出場數GamesPlayed**由大到小**排序
- 用pipe **%>%**

dplyr 參考文件與資源
====================================
- [Introduction to dplyr](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)
- DataCamp互動式教學課程 [Data Manipulation in R with dplyr](https://www.datacamp.com/courses/dplyr-data-manipulation-r-tutorial)


data.table
====================================
type:sub-section 

- 讀大型資料快
    - 效能比較可參考[Benchmarks : Grouping](https://github.com/Rdatatable/data.table/wiki/Benchmarks-%3A-Grouping)
- 分組計算方便

data.table
====================================
- data.frame資料框型別的延伸
- 比使用資料框快上數倍
- 必須安裝並載入data.table package
```{r eval=F}
install.packages("data.table")#第一次使用需安裝
```
```{r message=F}
library(data.table) ##載入
```

讀取資料的函數為`fread()`
```{r eval=F}
fread("檔案名稱")
```

data.frame轉data.table
====================================
- 使用`data.table()`函數將data.frame轉為data.table格式
- data.table的資料型態為`data.table`以及`data.frame`
    - data.table是data.frame資料框型別的延伸

```{r message=F,warnings=F}
library(SportsAnalytics)
##讀取15-16球季的資料
NBA1516<-fetch_NBAPlayerStatistics("15-16") 

library(data.table)
##轉換成data.table
NBA1516DT<-data.table(NBA1516) 
class(NBA1516DT)
```

SportsAnalytics提供的NBA資料
====================================
```{r message=F,warnings=F}
str(NBA1516DT)
```

data.table 語法設計
====================================
`data.table`資料型態的特殊結構和語法設計，便於後續資料分析處理

**DT[**`i`**,**`j`**,**`by`**=]**

- `i` 觀察值 (Row) 篩選邏輯
- `j` 所需欄位 (Column)
- `by` 分組依據

data.table 注意事項
====================================

- 各參數間需要以逗號 `,` 區隔
- 但若只需使用前方參數，後方的 **,** 可省略
    - 如只需使用 **i** 和 **j** 兩個參數，可以寫成 **DT[ i , j ]**。
- 若只需使用後方參數，前方的 **,** 不可省略
    - 如只需使用 **j** 一個參數，可以寫成 **DT[ , j ]**。


i 觀察值篩選邏輯
====================================
- 篩選**觀察值**，也就是針對列(Row)做子集
- 透過**布林值**的向量或是**元素索引(index)**向量指定篩選條件

擷取球員**姓名包含James字串**的資料
```{r eval=F}
NBA1516DT[grepl('James',Name)]
```
```{r echo=F}
knitr::kable(NBA1516DT[grepl('James',Name)]) 
```

複習：字串搜尋函數grepl
====================================
grepl(**欲搜尋的字串模板**,**字串向量**)，回傳T or F向量
```{r}
grepl('James',NBA1516DT$Name)
```


i 觀察值篩選邏輯
====================================
篩選所有**中鋒**，且**姓名包含"A"字串**的球員資料 (條件用**&**運算子串連)
```{r  eval=F}
NBA1516DT[grepl('A',Name)&Position=="C"]
```
```{r echo=F}
knitr::kable(NBA1516DT[grepl('A',Name)&Position=="C"]) 
```

i 觀察值篩選邏輯
====================================
篩選各隊**出場數超過80場**的球員資料
```{r eval=F}
NBA1516DT[GamesPlayed>80]
```
```{r echo=F}
knitr::kable(NBA1516DT[GamesPlayed>80]) 
```

data.table DT[i] 練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r,eval=F}
library(SportsAnalytics) #如果沒安裝過，要先安裝
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```
- 轉成data.table
```{r,eval=F}
library(data.table) #如果沒安裝過，要先安裝
NBA1516DT<-data.table(NBA1516)
```
- 試著用data.table語法篩選出所有助攻數(Assists)超過100的球員資料
- 有多少名球員符合條件? (篩選出幾筆觀察值?)

data.table 與 data.frame
====================================
type:alert

觀察值的篩選，用法有點像，又有點不像，到底差在哪裡？
```{r eval=F}
NBA1516DT[GamesPlayed>80]
NBA1516[NBA1516$GamesPlayed>80,]
```

j 欄位選擇運算:決定輸出欄位
====================================
- 來決定輸出**欄位**
- 可以是原始欄位
- 也可以是**計算後**的欄位

以計算所有球員的**平均出場數**為例：
```{r}
##因沒有篩選需求， , 前方留空
NBA1516DT[,mean(GamesPlayed)]
```

j 欄位選擇運算:計算多個數值
====================================
- 也可以一次計算多個數值
- 同時計算平均出場數、平均犯規次數以及平均抄截次數
- 此時第二個欄位`j`需要使用**.()**或是**list()**包起來
```{r}
NBA1516DT[,.(mean(GamesPlayed),
             mean(PersonalFouls),mean(Steals))]
```

j 欄位選擇運算:計算多個數值
====================================
- 也可以一次計算多個數值
- 同時計算平均出場數、平均犯規次數以及平均抄截次數
- 此時第二個欄位`j`需要使用**.()**或是**list()**包起來
```{r}
NBA1516DT[,list(mean(GamesPlayed),
                mean(PersonalFouls),mean(Steals))]
```

j 欄位選擇運算:計算多個數值
====================================
- 自動被加上欄位名稱V1, V2, V3，可能會造成數據判別錯誤
- 在新欄位定義的前方加上`欄位名稱=`，替欄位取名字
```{r}
NBA1516DT[,.(GPlayedMean=mean(GamesPlayed),
             PFoulsMean=mean(PersonalFouls),
             StealsMean=mean(Steals))]
```

j 欄位選擇運算:計算多個數值
====================================
不是只能算**平均值**，也可帶入其他函式做各式各樣的運算
```{r}
NBA1516DT[,
    .(GPlayedMax=max(GamesPlayed), #最大值
      TMadeMin=min(ThreesMade), #最小值
      FGoalsMadeSD=sd(FieldGoalsMade))] #標準差
```

DT[i,j]
====================================
- 配合第一個參數一起使用
- 計算出所有**出場數大於70**的球員，**平均投進幾顆三分球與兩分球**
```{r}
NBA1516DT[GamesPlayed>70,
          .(TMadeMean=mean(ThreesMade), 
            FGMadeMean=mean(FieldGoalsMade))]
```

data.table DT[i,j] 練習
====================================
type:alert
incremental:true

- 讀入NBA資料，轉成data.table
```{r,eval=F}
library(SportsAnalytics)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
library(data.table)
NBA1516DT<-data.table(NBA1516)
```
- 篩選出所有**助攻數(Assists)超過100**的球員資料
- 計算這些球員的**平均抄截數Steals**與**平均籃板數TotalRebounds**


by 分組依據
====================================
- 分組計算的依據
- 計算**NBA各隊**的**球員數**與**平均助攻數**
- 球員個數的計算在`data.table`內可使用`.N`指令
- 平均使用`mean()`函數
- `by=`後方加上分組依據(各隊Team)

```{r eval=F}
NBA1516DT[,.(.N,AssistsMean=mean(Assists)),
          by=Team]
```
```{r echo=F}
knitr::kable(head(NBA1516DT[,.(.N,AssistsMean=mean(Assists)),
          by=Team],3)) 
```

DT[i,j,by]
====================================
- 三個參數結合使用
- **NBA各隊**的**中鋒**，**球員數**和他們的**平均三分球出手次數**

```{r eval=F}
NBA1516DT[Position=="C",
          .(.N,
            TAttMean=mean(ThreesAttempted)),
          by=Team]
```
```{r echo=F}
knitr::kable(head(NBA1516DT[Position=="C",
          .(.N,TAttMean=mean(ThreesAttempted)),
          by=Team],5)) 
```

data.table 綜合練習
====================================
type:alert
incremental:true

- 讀入NBA資料
```{r,eval=F}
library(SportsAnalytics)
NBA1516<-fetch_NBAPlayerStatistics("15-16")
```
- 轉成data.table
```{r,eval=F}
library(data.table)
NBA1516DT<-data.table(NBA1516)
```
- 篩選出所有助攻數(Assists)超過100的球員資料
- 計算這些球員的平均抄截數Steals與籃板數TotalRebounds
- 以球隊做分組Team


data.table 參考文件與資源
====================================
- [官網](https://github.com/Rdatatable/data.table/wiki)
- 指令全集[The data.table R package cheat sheet](https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf)
- [A data.table R tutorial by DataCamp](https://www.datacamp.com/community/tutorials/data-table-r-tutorial#gs.vzMYa_k)
- DataCamp [互動式教學課程](https://www.datacamp.com/courses/data-table-data-manipulation-r-tutorial)


